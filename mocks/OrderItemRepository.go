// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "git.garena.com/sea-labs-id/batch-01/rafly-nagachi/final-project-backend/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// OrderItemRepository is an autogenerated mock type for the OrderItemRepository type
type OrderItemRepository struct {
	mock.Mock
}

// CreateOrderItem provides a mock function with given fields: tx, oi
func (_m *OrderItemRepository) CreateOrderItem(tx *gorm.DB, oi *model.OrderItem) (*model.OrderItem, error) {
	ret := _m.Called(tx, oi)

	var r0 *model.OrderItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.OrderItem) *model.OrderItem); ok {
		r0 = rf(tx, oi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.OrderItem) error); ok {
		r1 = rf(tx, oi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrderItemByID provides a mock function with given fields: tx, id
func (_m *OrderItemRepository) DeleteOrderItemByID(tx *gorm.DB, id uint) (bool, error) {
	ret := _m.Called(tx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) bool); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrderItemByUserID provides a mock function with given fields: tx, userID
func (_m *OrderItemRepository) DeleteOrderItemByUserID(tx *gorm.DB, userID uint) (bool, error) {
	ret := _m.Called(tx, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) bool); ok {
		r0 = rf(tx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderItemByOrderID provides a mock function with given fields: tx, orderID
func (_m *OrderItemRepository) FindOrderItemByOrderID(tx *gorm.DB, orderID uint) ([]*model.OrderItem, error) {
	ret := _m.Called(tx, orderID)

	var r0 []*model.OrderItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.OrderItem); ok {
		r0 = rf(tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderItemByUserID provides a mock function with given fields: tx, userID
func (_m *OrderItemRepository) FindOrderItemByUserID(tx *gorm.DB, userID uint) ([]*model.OrderItem, error) {
	ret := _m.Called(tx, userID)

	var r0 []*model.OrderItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.OrderItem); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderItemByUserIDAndOrderID provides a mock function with given fields: tx, userID, orderID
func (_m *OrderItemRepository) FindOrderItemByUserIDAndOrderID(tx *gorm.DB, userID uint, orderID uint) ([]*model.OrderItem, error) {
	ret := _m.Called(tx, userID, orderID)

	var r0 []*model.OrderItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) []*model.OrderItem); ok {
		r0 = rf(tx, userID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, userID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrderItemOfUserID provides a mock function with given fields: tx, id, userID
func (_m *OrderItemRepository) IsOrderItemOfUserID(tx *gorm.DB, id uint, userID uint) (bool, error) {
	ret := _m.Called(tx, id, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) bool); ok {
		r0 = rf(tx, id, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderItemByID provides a mock function with given fields: tx, id, oi
func (_m *OrderItemRepository) UpdateOrderItemByID(tx *gorm.DB, id uint, oi *model.OrderItem) (*model.OrderItem, error) {
	ret := _m.Called(tx, id, oi)

	var r0 *model.OrderItem
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.OrderItem) *model.OrderItem); ok {
		r0 = rf(tx, id, oi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.OrderItem) error); ok {
		r1 = rf(tx, id, oi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderItemRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderItemRepository creates a new instance of OrderItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderItemRepository(t mockConstructorTestingTNewOrderItemRepository) *OrderItemRepository {
	mock := &OrderItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
