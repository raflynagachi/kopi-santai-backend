// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/raflynagachi/kopi-santai-backend/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// GameRepository is an autogenerated mock type for the GameRepository type
type GameRepository struct {
	mock.Mock
}

// CreateLeaderboard provides a mock function with given fields: tx, gl
func (_m *GameRepository) CreateLeaderboard(tx *gorm.DB, gl *model.GameLeaderboard) (*model.GameLeaderboard, error) {
	ret := _m.Called(tx, gl)

	var r0 *model.GameLeaderboard
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.GameLeaderboard) *model.GameLeaderboard); ok {
		r0 = rf(tx, gl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GameLeaderboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.GameLeaderboard) error); ok {
		r1 = rf(tx, gl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: tx
func (_m *GameRepository) FindAll(tx *gorm.DB) ([]*model.GameLeaderboard, error) {
	ret := _m.Called(tx)

	var r0 []*model.GameLeaderboard
	if rf, ok := ret.Get(0).(func(*gorm.DB) []*model.GameLeaderboard); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GameLeaderboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: tx, userID
func (_m *GameRepository) FindByUserID(tx *gorm.DB, userID uint) (*model.GameLeaderboard, error) {
	ret := _m.Called(tx, userID)

	var r0 *model.GameLeaderboard
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.GameLeaderboard); ok {
		r0 = rf(tx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GameLeaderboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsTargetScoreReached provides a mock function with given fields: tx, prevScore, score
func (_m *GameRepository) IsTargetScoreReached(tx *gorm.DB, prevScore uint, score uint) (*model.Game, error) {
	ret := _m.Called(tx, prevScore, score)

	var r0 *model.Game
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.Game); ok {
		r0 = rf(tx, prevScore, score)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, prevScore, score)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserTriedLessThanX provides a mock function with given fields: tx, userID, x
func (_m *GameRepository) IsUserTriedLessThanX(tx *gorm.DB, userID uint, x uint) (*model.GameLeaderboard, error) {
	ret := _m.Called(tx, userID, x)

	var r0 *model.GameLeaderboard
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, uint) *model.GameLeaderboard); ok {
		r0 = rf(tx, userID, x)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GameLeaderboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, uint) error); ok {
		r1 = rf(tx, userID, x)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetTriedChance provides a mock function with given fields: tx
func (_m *GameRepository) ResetTriedChance(tx *gorm.DB) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateScore provides a mock function with given fields: tx, id, gl
func (_m *GameRepository) UpdateScore(tx *gorm.DB, id uint, gl *model.GameLeaderboard) (*model.GameLeaderboard, error) {
	ret := _m.Called(tx, id, gl)

	var r0 *model.GameLeaderboard
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.GameLeaderboard) *model.GameLeaderboard); ok {
		r0 = rf(tx, id, gl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GameLeaderboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.GameLeaderboard) error); ok {
		r1 = rf(tx, id, gl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameRepository creates a new instance of GameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameRepository(t mockConstructorTestingTNewGameRepository) *GameRepository {
	mock := &GameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
