// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/raflynagachi/kopi-santai-backend/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// GetProfileDetail provides a mock function with given fields: id
func (_m *UserService) GetProfileDetail(id uint) (*dto.ProfileRes, error) {
	ret := _m.Called(id)

	var r0 *dto.ProfileRes
	if rf, ok := ret.Get(0).(func(uint) *dto.ProfileRes); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ProfileRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: id, req
func (_m *UserService) UpdateProfile(id uint, req *dto.UserUpdateReq) (*dto.UserRes, error) {
	ret := _m.Called(id, req)

	var r0 *dto.UserRes
	if rf, ok := ret.Get(0).(func(uint, *dto.UserUpdateReq) *dto.UserRes); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.UserUpdateReq) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
