// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/raflynagachi/kopi-santai-backend/dto"
	mock "github.com/stretchr/testify/mock"
)

// GameService is an autogenerated mock type for the GameService type
type GameService struct {
	mock.Mock
}

// AddCouponPrizeToUser provides a mock function with given fields: req, userID
func (_m *GameService) AddCouponPrizeToUser(req *dto.GameResultPostReq, userID uint) (*dto.UserCouponRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.UserCouponRes
	if rf, ok := ret.Get(0).(func(*dto.GameResultPostReq, uint) *dto.UserCouponRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserCouponRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.GameResultPostReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *GameService) FindAll() ([]*dto.GameLeaderboardRes, error) {
	ret := _m.Called()

	var r0 []*dto.GameLeaderboardRes
	if rf, ok := ret.Get(0).(func() []*dto.GameLeaderboardRes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.GameLeaderboardRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: userID
func (_m *GameService) FindByUserID(userID uint) (*dto.GameLeaderboardRes, error) {
	ret := _m.Called(userID)

	var r0 *dto.GameLeaderboardRes
	if rf, ok := ret.Get(0).(func(uint) *dto.GameLeaderboardRes); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GameLeaderboardRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameService interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameService creates a new instance of GameService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameService(t mockConstructorTestingTNewGameService) *GameService {
	mock := &GameService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
