// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/raflynagachi/kopi-santai-backend/dto"
	mock "github.com/stretchr/testify/mock"

	model "github.com/raflynagachi/kopi-santai-backend/model"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: req, userID
func (_m *OrderService) CreateOrder(req *dto.OrderPostReq, userID uint) (*dto.OrderRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.OrderRes
	if rf, ok := ret.Get(0).(func(*dto.OrderPostReq, uint) *dto.OrderRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OrderRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.OrderPostReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: q
func (_m *OrderService) FindAll(q *model.QueryParamOrder) (*dto.OrderPaginationRes, error) {
	ret := _m.Called(q)

	var r0 *dto.OrderPaginationRes
	if rf, ok := ret.Get(0).(func(*model.QueryParamOrder) *dto.OrderPaginationRes); ok {
		r0 = rf(q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OrderPaginationRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.QueryParamOrder) error); ok {
		r1 = rf(q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderByIDAndUserID provides a mock function with given fields: id, userID
func (_m *OrderService) FindOrderByIDAndUserID(id uint, userID uint) (*dto.OrderRes, error) {
	ret := _m.Called(id, userID)

	var r0 *dto.OrderRes
	if rf, ok := ret.Get(0).(func(uint, uint) *dto.OrderRes); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OrderRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderByUserID provides a mock function with given fields: userID
func (_m *OrderService) FindOrderByUserID(userID uint) ([]*dto.OrderRes, error) {
	ret := _m.Called(userID)

	var r0 []*dto.OrderRes
	if rf, ok := ret.Get(0).(func(uint) []*dto.OrderRes); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.OrderRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderService(t mockConstructorTestingTNewOrderService) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
