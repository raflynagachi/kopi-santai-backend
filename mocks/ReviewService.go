// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/raflynagachi/kopi-santai-backend/dto"
	mock "github.com/stretchr/testify/mock"
)

// ReviewService is an autogenerated mock type for the ReviewService type
type ReviewService struct {
	mock.Mock
}

// Create provides a mock function with given fields: req, userID
func (_m *ReviewService) Create(req *dto.ReviewPostReq, userID uint) (*dto.ReviewRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.ReviewRes
	if rf, ok := ret.Get(0).(func(*dto.ReviewPostReq, uint) *dto.ReviewRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ReviewRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.ReviewPostReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMenuID provides a mock function with given fields: menuID
func (_m *ReviewService) FindByMenuID(menuID uint) ([]*dto.ReviewRes, error) {
	ret := _m.Called(menuID)

	var r0 []*dto.ReviewRes
	if rf, ok := ret.Get(0).(func(uint) []*dto.ReviewRes); ok {
		r0 = rf(menuID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ReviewRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(menuID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReviewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviewService creates a new instance of ReviewService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviewService(t mockConstructorTestingTNewReviewService) *ReviewService {
	mock := &ReviewService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
