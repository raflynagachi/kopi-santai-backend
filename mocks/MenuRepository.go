// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "git.garena.com/sea-labs-id/batch-01/rafly-nagachi/final-project-backend/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// MenuRepository is an autogenerated mock type for the MenuRepository type
type MenuRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, menu
func (_m *MenuRepository) Create(tx *gorm.DB, menu *model.Menu) (*model.Menu, error) {
	ret := _m.Called(tx, menu)

	var r0 *model.Menu
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Menu) *model.Menu); ok {
		r0 = rf(tx, menu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Menu) error); ok {
		r1 = rf(tx, menu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: tx, id
func (_m *MenuRepository) DeleteByID(tx *gorm.DB, id uint) (bool, error) {
	ret := _m.Called(tx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) bool); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: tx, q
func (_m *MenuRepository) FindAll(tx *gorm.DB, q *model.QueryParamMenu) ([]*model.Menu, error) {
	ret := _m.Called(tx, q)

	var r0 []*model.Menu
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.QueryParamMenu) []*model.Menu); ok {
		r0 = rf(tx, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.QueryParamMenu) error); ok {
		r1 = rf(tx, q)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: tx, id
func (_m *MenuRepository) FindByID(tx *gorm.DB, id uint) (*model.Menu, error) {
	ret := _m.Called(tx, id)

	var r0 *model.Menu
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) *model.Menu); ok {
		r0 = rf(tx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMenuOptions provides a mock function with given fields: tx, categoryID
func (_m *MenuRepository) FindMenuOptions(tx *gorm.DB, categoryID uint) ([]*model.MenuOptionsCategories, error) {
	ret := _m.Called(tx, categoryID)

	var r0 []*model.MenuOptionsCategories
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.MenuOptionsCategories); ok {
		r0 = rf(tx, categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.MenuOptionsCategories)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tx, id, d
func (_m *MenuRepository) Update(tx *gorm.DB, id uint, d *model.Menu) (*model.Menu, error) {
	ret := _m.Called(tx, id, d)

	var r0 *model.Menu
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint, *model.Menu) *model.Menu); ok {
		r0 = rf(tx, id, d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint, *model.Menu) error); ok {
		r1 = rf(tx, id, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenuRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuRepository creates a new instance of MenuRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuRepository(t mockConstructorTestingTNewMenuRepository) *MenuRepository {
	mock := &MenuRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
