// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/raflynagachi/kopi-santai-backend/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ReviewRepository is an autogenerated mock type for the ReviewRepository type
type ReviewRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, review
func (_m *ReviewRepository) Create(tx *gorm.DB, review *model.Review) (*model.Review, error) {
	ret := _m.Called(tx, review)

	var r0 *model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Review) *model.Review); ok {
		r0 = rf(tx, review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Review) error); ok {
		r1 = rf(tx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMenuID provides a mock function with given fields: tx, menuID
func (_m *ReviewRepository) FindByMenuID(tx *gorm.DB, menuID uint) ([]*model.Review, error) {
	ret := _m.Called(tx, menuID)

	var r0 []*model.Review
	if rf, ok := ret.Get(0).(func(*gorm.DB, uint) []*model.Review); ok {
		r0 = rf(tx, menuID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorm.DB, uint) error); ok {
		r1 = rf(tx, menuID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReviewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewReviewRepository creates a new instance of ReviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReviewRepository(t mockConstructorTestingTNewReviewRepository) *ReviewRepository {
	mock := &ReviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
