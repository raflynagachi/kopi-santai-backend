// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/rafly-nagachi/final-project-backend/dto"
	mock "github.com/stretchr/testify/mock"
)

// DeliveryService is an autogenerated mock type for the DeliveryService type
type DeliveryService struct {
	mock.Mock
}

// UpdateStatus provides a mock function with given fields: id, req
func (_m *DeliveryService) UpdateStatus(id uint, req *dto.DeliveryUpdateStatusReq) (*dto.DeliveryRes, error) {
	ret := _m.Called(id, req)

	var r0 *dto.DeliveryRes
	if rf, ok := ret.Get(0).(func(uint, *dto.DeliveryUpdateStatusReq) *dto.DeliveryRes); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.DeliveryRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *dto.DeliveryUpdateStatusReq) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDeliveryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeliveryService creates a new instance of DeliveryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeliveryService(t mockConstructorTestingTNewDeliveryService) *DeliveryService {
	mock := &DeliveryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
