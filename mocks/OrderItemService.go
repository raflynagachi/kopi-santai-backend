// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-01/rafly-nagachi/final-project-backend/dto"
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// OrderItemService is an autogenerated mock type for the OrderItemService type
type OrderItemService struct {
	mock.Mock
}

// CreateOrderItem provides a mock function with given fields: req, userID
func (_m *OrderItemService) CreateOrderItem(req *dto.OrderItemPostReq, userID uint) (*dto.OrderItemRes, error) {
	ret := _m.Called(req, userID)

	var r0 *dto.OrderItemRes
	if rf, ok := ret.Get(0).(func(*dto.OrderItemPostReq, uint) *dto.OrderItemRes); ok {
		r0 = rf(req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OrderItemRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.OrderItemPostReq, uint) error); ok {
		r1 = rf(req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrderItemByID provides a mock function with given fields: id, userID
func (_m *OrderItemService) DeleteOrderItemByID(id uint, userID uint) (gin.H, error) {
	ret := _m.Called(id, userID)

	var r0 gin.H
	if rf, ok := ret.Get(0).(func(uint, uint) gin.H); ok {
		r0 = rf(id, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.H)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrderItemByUserID provides a mock function with given fields: userID
func (_m *OrderItemService) FindOrderItemByUserID(userID uint) ([]*dto.OrderItemRes, error) {
	ret := _m.Called(userID)

	var r0 []*dto.OrderItemRes
	if rf, ok := ret.Get(0).(func(uint) []*dto.OrderItemRes); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.OrderItemRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrderItemByID provides a mock function with given fields: id, userID, req
func (_m *OrderItemService) UpdateOrderItemByID(id uint, userID uint, req *dto.OrderItemPatchReq) (*dto.OrderItemRes, error) {
	ret := _m.Called(id, userID, req)

	var r0 *dto.OrderItemRes
	if rf, ok := ret.Get(0).(func(uint, uint, *dto.OrderItemPatchReq) *dto.OrderItemRes); ok {
		r0 = rf(id, userID, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OrderItemRes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint, *dto.OrderItemPatchReq) error); ok {
		r1 = rf(id, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderItemService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderItemService creates a new instance of OrderItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderItemService(t mockConstructorTestingTNewOrderItemService) *OrderItemService {
	mock := &OrderItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
